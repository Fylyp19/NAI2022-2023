 /*map<string, function<double(vector<double>)> > func;
    func["beale"] = [](auto arg) { return beale(arg.at(0), arg.at(1)); };
    func["booth"] = [](auto arg) { return booth(arg.at(0), arg.at(1)); };
    func["matyas"] = [](auto arg) { return matyas(arg.at(0), arg.at(1)); };
    try{
        vector<string> func_args(argv, argv + 2);
        vector<string> num_args(argv + 2, argv + argc);
        auto selected_f = func_args.at(1);
        std::vector<double> doubleVector(num_args.size());
        std::transform(num_args.begin(), num_args.end(), doubleVector.begin(), [](const std::string &val) {
            return std::stod(val);
        });
        auto result = func.at(selected_f);
        cout << "Rozwiazanie = " << result(doubleVector) << endl;
    } catch (std::out_of_range aor) {
        cout << "Podaj brakujace argumenty.";
    }*/